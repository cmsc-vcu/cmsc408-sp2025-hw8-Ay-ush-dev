---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-Ay-ush-dev#>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
run_sql_and_return_html(cnx,"""
select
  *
from
  world_bank_data.wdi_country
where
  country_region IS NULL
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
execute_ddl(cnx,"""
DROP TABLE IF EXISTS wdi_country;
CREATE TABLE wdi_country AS
SELECT *
FROM world_bank_data.wdi_country
WHERE country_region IS NOT NULL;
""")
```

```{python}
run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS "Row Count"
FROM wdi_country;
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select "doh!" as "Homer says ..." from dual
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS "Country Count in 2020"
FROM wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
run_sql_and_return_html(cnx,"""
SELECT DISTINCT country_region AS "Unique Regions"
FROM wdi_country
ORDER BY country_region;
""")

```

## Task 7

How many countries are in each region?

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_region AS "Region",
  COUNT(*) AS "Number of Countries"
FROM 
  wdi_country
GROUP BY 
  country_region
ORDER BY 
  COUNT(*) DESC;
""")
```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_full_name AS "Country",
  country_region AS "Region"
FROM 
  wdi_country
WHERE 
  country_region = 'North America'
ORDER BY 
  country_full_name;
""")
```

## Task 9

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_region AS "Region",
  country_short_name AS "Short Name",
  country_full_name AS "Full Name"
FROM 
  wdi_country
WHERE 
  country_short_name = 'Qatar' OR country_full_name LIKE '%Qatar%';
""")
```

## Task 10

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_code,
  country_short_name,
  country_abbr,
  country_wb_abbr,
  country_region
FROM 
  wdi_country
WHERE 
  country_abbr != country_wb_abbr
ORDER BY 
  country_region, country_short_name;
""")
```

## Task 11

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_income_category AS "Income Category",
  COUNT(*) AS "Number of Countries"
FROM 
  wdi_country
GROUP BY 
  country_income_category
ORDER BY 
  COUNT(*) DESC;
""")
```

## Task 12

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_short_name,
  country_income_category,
  country_region
FROM 
  wdi_country
WHERE 
  country_income_category = ''
ORDER BY 
  country_short_name;
""")
```

## Task 13

```{python}
execute_ddl(cnx,"""
UPDATE wdi_country
SET country_income_category = 'High income'
WHERE country_short_name = 'Qatar' AND country_income_category = '';
""")

```
```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_short_name,
  country_income_category,
  country_region
FROM 
  wdi_country
WHERE 
  country_short_name = 'Qatar';
""")

```

## Task 14

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_region AS "Region",
  country_income_category AS "Income Group",
  COUNT(*) AS "No. of Countries"
FROM 
  wdi_country
GROUP BY 
  country_region, country_income_category
ORDER BY 
  country_region, country_income_category;
""")
```

## Task 15

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_region AS "Region",
  SUM(CASE WHEN country_income_category = 'High income' THEN 1 ELSE 0 END) AS "High income",
  SUM(CASE WHEN country_income_category = 'Upper middle income' THEN 1 ELSE 0 END) AS "Upper middle income",
  SUM(CASE WHEN country_income_category = 'Lower middle income' THEN 1 ELSE 0 END) AS "Lower middle income",
  SUM(CASE WHEN country_income_category = 'Low income' THEN 1 ELSE 0 END) AS "Low income",
  SUM(CASE WHEN country_income_category = '' THEN 1 ELSE 0 END) AS "No Category",
  COUNT(*) AS "Total"
FROM 
  wdi_country
GROUP BY 
  country_region
ORDER BY 
  country_region;
""")
```

## Task 16

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  COUNT(*) AS "Count",
  country_region AS "Region",
  country_income_category AS "Income Group"
FROM 
  wdi_country
WHERE 
  country_income_category = 'Low income'
GROUP BY 
  country_region, country_income_category
ORDER BY 
  COUNT(*) DESC
LIMIT 1;
""")
```

## Task 17

```{python}
run_sql_and_return_html(cnx,"""
SELECT 
  country_code,
  country_short_name,
  country_region,
  country_income_category
FROM 
  wdi_country
WHERE 
  country_region = (SELECT country_region FROM wdi_country WHERE country_code = 'MHL')
  AND country_income_category = (SELECT country_income_category FROM wdi_country WHERE country_code = 'MHL')
ORDER BY 
  country_short_name;
""")
```

## Task 18

```{python}
run_sql_and_return_html(cnx,"""
WITH all_regions AS (
  SELECT DISTINCT country_region FROM wdi_country
),
all_income_categories AS (
  SELECT DISTINCT country_income_category FROM wdi_country
),
all_combinations AS (
  SELECT 
    r.country_region,
    i.country_income_category
  FROM 
    all_regions r
  CROSS JOIN 
    all_income_categories i
),
existing_combinations AS (
  SELECT 
    country_region,
    country_income_category,
    COUNT(*) as cnt
  FROM 
    wdi_country
  GROUP BY 
    country_region, country_income_category
)
SELECT 
  ac.country_region,
  ac.country_income_category
FROM 
  all_combinations ac
LEFT JOIN 
  existing_combinations ec
ON 
  ac.country_region = ec.country_region
  AND ac.country_income_category = ec.country_income_category
WHERE 
  ec.cnt IS NULL;
""")
```

## Task 19

```{python}
run_sql_and_return_html(cnx,"""
WITH region_income_counts AS (
  SELECT 
    country_region,
    country_income_category,
    COUNT(*) AS country_count
  FROM 
    wdi_country
  GROUP BY 
    country_region, country_income_category
),
region_totals AS (
  SELECT 
    country_region,
    COUNT(*) AS region_total
  FROM 
    wdi_country
  GROUP BY 
    country_region
),
income_totals AS (
  SELECT 
    country_income_category,
    COUNT(*) AS income_total
  FROM 
    wdi_country
  GROUP BY 
    country_income_category
),
grand_total AS (
  SELECT 
    COUNT(*) AS total
  FROM 
    wdi_country
)
SELECT 
  ric.country_region,
  ric.country_income_category,
  ric.country_count,
  rt.region_total,
  it.income_total,
  gt.total,
  ROUND((ric.country_count / gt.total) * 100, 2) AS percentage
FROM 
  region_income_counts ric
JOIN 
  region_totals rt ON ric.country_region = rt.country_region
JOIN 
  income_totals it ON ric.country_income_category = it.country_income_category
CROSS JOIN 
  grand_total gt
ORDER BY 
  ric.country_region, ric.country_income_category;
""")


```

## Task 20

```{python}
run_sql_and_return_html(cnx,"""
WITH region_income_counts AS (
  SELECT 
    country_region,
    country_income_category,
    COUNT(*) AS country_count
  FROM 
    wdi_country
  GROUP BY 
    country_region, country_income_category
),
grand_total AS (
  SELECT 
    COUNT(*) AS total
  FROM 
    wdi_country
)
SELECT 
  ric.country_region AS "Region",
  ROUND(SUM(CASE WHEN ric.country_income_category = 'High income' THEN ric.country_count / gt.total * 100 ELSE 0 END), 2) AS "High income %",
  ROUND(SUM(CASE WHEN ric.country_income_category = 'Upper middle income' THEN ric.country_count / gt.total * 100 ELSE 0 END), 2) AS "Upper middle income %",
  ROUND(SUM(CASE WHEN ric.country_income_category = 'Lower middle income' THEN ric.country_count / gt.total * 100 ELSE 0 END), 2) AS "Lower middle income %",
  ROUND(SUM(CASE WHEN ric.country_income_category = 'Low income' THEN ric.country_count / gt.total * 100 ELSE 0 END), 2) AS "Low income %",
  ROUND(SUM(CASE WHEN ric.country_income_category = '' THEN ric.country_count / gt.total * 100 ELSE 0 END), 2) AS "No Category %"
FROM 
  region_income_counts ric
CROSS JOIN 
  grand_total gt
GROUP BY 
  ric.country_region
ORDER BY 
  ric.country_region;
""")
```

## Task 21

```{python}
run_sql_and_return_html(cnx,"""
WITH income_counts AS (
  SELECT 
    country_income_category,
    COUNT(*) AS count
  FROM 
    wdi_country
  GROUP BY 
    country_income_category
),
total AS (
  SELECT 
    COUNT(*) AS total
  FROM 
    wdi_country
)
SELECT 
  ic.country_income_category AS "Income Category",
  ic.count AS "Number of Countries",
  t.total AS "Total Countries",
  ROUND((ic.count / t.total) * 100, 2) AS "Percentage"
FROM 
  income_counts ic
CROSS JOIN 
  total t
ORDER BY 
  ic.count DESC;
""")
```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

(In this assignment, I strengthened my SQL skills, especially with SELECT queries, WHERE filtering, and basic aggregations like GROUP BY and COUNT(). Those feel comfortable now.

I still need practice with advanced SQL, like CTEs and pivoting data using CASE statements—tasks 18-20 were tricky.

Overall, this assignment showed me SQL isn't just for data retrieval. Working with World Bank data also helped me see how these skills apply to real-world scenarios.)

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

(For the toughest tasks (18-20), I broke them down step-by-step: identifying data needed, reshaping it, and testing incrementally. For complex joins and CTEs, I simplified queries first to understand intermediate results. In the future, I'll sketch the desired output structure first, use temporary tables for clarity, and test on small datasets before scaling up.)


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

(Biggest takeaways from this assignment:

SQL isn't just for data retrieval—it’s great for complex analysis and reshaping data.

CTEs make complex queries clearer and easier to manage.

CASE statements within aggregations are essential for pivoting data.

Analyzing data effectively requires both SQL skills and understanding the data context (like World Bank categories).

Being able to analyze large datasets directly in SQL, rather than exporting to other tools, saves time, maintains data integrity, and makes analyses reproducible—critical skills as organizations become more data-driven.)


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

